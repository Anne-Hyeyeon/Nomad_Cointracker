[cointracker]
1. coin API를 useEffect를 이용해 페이지가 로딩될 때 불러온다.
2.fetch : API 가져오기, response로 코인 정보를 받는다.
(이 모든 과정은 네트워크의 ticker에서 확인이 가능하다.)
3. data를 state에 넣기 -> useState
4. map의 첫 번째 매개변수는 함수(배열 요소에 각각 적용될 함수) 두 번째 매개변수는 index
5.  coins.map((coin) => <li>{coin.name} ({coin.symbol}) : ${coin.quotes.USD.price} USD</li>) 에서 괄호 안 coin은 fetch를 통해 불러온 코인 각각을 뜻한다. 
처음에는 기본값으로 되어있는 빈 array를 넘겨주기 때문에 0이었다가, 데이터를 다 받아오면 바뀐다.

과제 : 인풋창에 달러 입력하면 코인으로 얼마인지 나오게~
option의 value를 배열의 index로 만들어준다.
ex)1,2,3,4....

[movie app]
fetch로 api 불러온 다음
.then으로 response 얻기 -> json으로 바꿔줌
json 내용 movies에다가 저장, 로딩 끝내기 (false로 바꾸기)

async, awiait 연습

Browser Router에서 URL은 우리가 예상하는대로 생겼다. (보통의 웹사이트)
HashRouter는 약간 다르다! /#/가 생긴다.
대부분은 BrowserRouter를 사용한다.
일반 a를 이용한 링크과 Link 차이점 :
a를 사용하면 페이지가 리로드된다.

원래는 App 컴포넌트가 모든 걸 다 했지만,
App의 모든 로직을 Home이라는 별개의 컴포넌트로 옮긴다.
React-Router-Dom의 컴포넌트들이 하는 것 : url을 바라보고 있다가, url에 따라 어떤걸 보여줄지 결정한다.

React Router의 동적 url : url안에 변수를 넣을 수 있음.
':'를 반드시 써줘야한다.

props응 object일 뿐이고, 우리는 그걸 열어서 필요한 item을 사용한다.

useParams : Router에서 :뒤에 입력한 것의 값을 나타내준다.
ex) movie/:chillitomato
useParam 쓰면
chillitomato:20329
따라서 : 뒤에 있는 건 변수를 받는 거라고 보면 됨.

const { id } = useParams()
id는 원래 객체였음. 그 안에 있는 값 따올때 중괄호 사용.    

깃헙으로 배포하는 법
1. npm i로 gh-pages 설치
2. npm run build
3. package-json의 scripts에 다음 추가
    "deploy": "gh-pages -d build",
    "predeploy": "npm run build" (디플로이 전 빌드)
4. 홈페이지 주소
깃헙하이디.github.io/레퍼지토리이름
